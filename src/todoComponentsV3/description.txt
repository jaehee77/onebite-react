==============================================================================================

## useMemo ##

“메모이제이션” 기법을 기반으로 불필요한 연산을 최적화하는 리액트 훅
Memoization : 기억해두기, 메모해두기 라는 뜻

자매품: useCallback

ex. List.jsx

==============================================================================================

## React.Memo
-> 불필요한 리렌더링 방지하기

const MemoizedComponent = memo(Component)
     반환값: 최적화된 컴포넌트       인수: 컴포넌트

memo로 최적화된 컴포넌트는 부모가 리렌더링이 되더라도 자신이 받은 Props 가 바뀌지 않으면
리렌더링이 되지 않는다.

# 고차 컴포넌트(HOC : Higher Order Component)
-> 컴포넌트에 추가적인 기능을 덧붙여서 기능이 추가된 새로운 컴포넌트를 반환하는 하는 것을 고차 컴포넌트라고 한다.

ex. TodoItem.jsx

==============================================================================================

## useCallback ##
->  불필요한 함수 재생성을 방지하기

useCallback(() => {}, []); // [] 빈배열 전달시 마운트될 때에만 한 번만 함수를 생성하고 그 다음부터 재생성 X

ex. Todo.jsx

==============================================================================================

## Context
-> 컴포넌트간의 데이터를 전달하는 또 다른 방법
   기존의 Props가 가지고 있던 단점을 해결할 수 있음
   * Props의 단점 : Props Drilling

Context : 데이터 보관소(객체)

ex. todoComponentsV3/*.jsx

==============================================================================================